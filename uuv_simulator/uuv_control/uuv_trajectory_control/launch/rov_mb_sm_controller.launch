<launch>
  <!-- Vehicle namespace -->
  <arg name="uuv_name"/>
  <!-- Name of the vehicle model -->
  <arg name="model_name" default="$(arg uuv_name)"/>
  <!-- Thruster saturation -->
  <arg name="saturation" default="1200"/>
  <!-- Flag to start the trajectory visual markers publisher -->
  <arg name="gui_on" default="true"/>
  <!-- Flag set as true to use load controller the parameters from the file  -->
  <arg name="use_params_file" default="false"/>

  <!-- If the file is not used, read the parameters from the user input -->
  <!-- Caution: no spaces between the parameter values -->
  <arg name="lambda" default="10,10,10,10,10,10"/>
  <arg name="rho_constant" default="10000,10000,10000,10000,10000,10000"/>
  <arg name="k" default="500,500,500,500,500,500"/>
  <arg name="c" default="50,50,50,1,1,1"/>
  <arg name="adapt_slope" default="100,10,10"/>
  <arg name="rho_0" default="3000,3000,8000,1500,1500,8000"/>
  <arg name="drift_prevent" default="0.03"/>

  <!-- Controller configuration file -->
  <arg name="controller_config_file" default="$(find uuv_trajectory_control)/config/controllers/mb_sm/$(arg model_name)/params.yaml"/>
  <!-- Model parameters -->
  <arg name="model_params_file" default="$(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml"/>

  <!-- Start the thruster allocation manager -->
  <include file="$(find uuv_thruster_manager)/launch/thruster_manager.launch">
     <arg name="uuv_name" value="$(arg uuv_name)" />
     <arg name="model_name" value="$(arg model_name)" />
   </include>

  <!-- This node just reads the trajectory and waypoint topics and publishes
       visualization markers for RViz -->
  <group if="$(arg gui_on)">
    <group ns="$(arg uuv_name)">
      <node pkg="uuv_control_utils"
            type="trajectory_marker_publisher.py"
            name="trajectory_marker_publisher"
            output="screen">
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
      </node>
    </group>
  </group>

  <group if="$(arg use_params_file)">
    <group ns="$(arg uuv_name)">
      <node pkg="uuv_trajectory_control"
            type="rov_mb_sm_controller.py"
            name="rov_mb_smcontroller"
            output="screen">
          <!-- Remap necessary topics -->
          <remap from="odom" to="pose_gt"/>
          <remap from="trajectory" to="dp_controller/trajectory"/>
          <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
          <remap from="waypoints" to="dp_controller/waypoints"/>
          <remap from="error" to="dp_controller/error"/>
          <remap from="reference" to="dp_controller/reference"/>
          <remap from="thruster_output" to="thruster_manager/input"/>
          <rosparam param="saturation" subst_value="true">$(arg saturation)</rosparam>
          <rosparam file="$(arg controller_config_file)" command="load"/>
          <rosparam file="$(arg model_params_file)" command="load"/>
      </node>
    </group>
  </group>

  <group unless="$(arg use_params_file)">
    <group ns="$(arg uuv_name)">
      <node pkg="uuv_trajectory_control"
            type="rov_mb_sm_controller.py"
            name="rov_mb_smcontroller"
            output="screen">
          <!-- Remap necessary topics -->
          <remap from="odom" to="pose_gt"/>
          <remap from="trajectory" to="dp_controller/trajectory"/>
          <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
          <remap from="waypoints" to="dp_controller/waypoints"/>
          <remap from="error" to="dp_controller/error"/>
          <remap from="reference" to="dp_controller/reference"/>
          <remap from="thruster_output" to="thruster_manager/input"/>
          <rosparam file="$(arg model_params_file)" command="load"/>

          <rosparam subst_value="true">
            saturation: $(arg saturation)
            lambda: [$(arg lambda)]
            rho_constant: [$(arg rho_constant)]
            k: [$(arg k)]
            c: [$(arg c)]
            adapt_slope: [$(arg adapt_slope)]
            rho_0: [$(arg rho_0)]
            drift_prevent: $(arg drift_prevent)
          </rosparam>
      </node>
    </group>
  </group>

</launch>
